#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gonano/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

include Hooky::Redis

config = converge( Hooky::Redis::CONFIG_DEFAULTS, payload[:config] )

if payload[:platform] != 'local'
  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

  # Create some ssh host keys
  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_rsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_dsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ecdsa_key' }
  end

  execute "ssh-keygen -f /opt/gonano/etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
    not_if { ::File.exists? '/opt/gonano/etc/ssh/ssh_host_ed25519_key' }
  end
end

if ['default', 'primary', 'secondary'].include? payload[:member][:role]
  directory '/data/var/db/redis' do
    recursive true
  end

  if payload[:platform] == 'local'
    maxmemory = 128
    appname   = 'nanobox'
  else
    total_mem = `vmstat -s | grep 'total memory' | awk '{print $1}'`.to_i
    cgroup_mem = `cat /sys/fs/cgroup/memory/memory.limit_in_bytes`.to_i
    maxmemory = [ total_mem / 1024, cgroup_mem / 1024 / 1024 ].min
    appname   = 'nanobox'
  end

  # chown data/var/db/redis for gonano
  execute 'chown /data/var/db/redis' do
    command 'chown -R gonano:gonano /data/var/db/redis'
  end

  directory '/data/etc/redis' do
    recursive true
  end

  # Configure redis
  template '/data/etc/redis/redis.conf' do
    mode 0755
    source 'redis.conf.erb'
    variables ({ config: config, maxmemory: maxmemory })
  end

  # Configure narc
  template '/opt/gonano/etc/narc.conf' do
    variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
  end

  directory '/etc/service/narc'

  template '/etc/service/narc/run' do
    mode 0755
    source 'run-root.erb'
    variables ({ exec: "/opt/gonano/bin/narcd /opt/gonano/etc/narc.conf" })
  end
end